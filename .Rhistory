runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
View(WRP)
View(FMM)
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('C:/Users/Peter/Desktop/Demo.R')
water <- read_xlsx("C:/Users/Peter/Downloads/US-TotW-ByState.xlsx")
water
runApp('C:/Users/Peter/Desktop/Demo.R')
View(water)
water <- read_xlsx("C:/Users/Peter/Downloads/US-TotW-ByState.xlsx")
water
runApp('C:/Users/Peter/Desktop/Demo.R')
runApp('C:/Users/Peter/Desktop/Demo.R')
runApp('C:/Users/Peter/Desktop/Demo.R')
water$roundNum <- round(water$State,2)
water
runApp('C:/Users/Peter/Desktop/Demo.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
# get to know data
states=row.names(USArrests)
states
names(USArrests)
USArrests
# get means and variances of columns
apply(USArrests, 2, mean)
apply(USArrests, 2, var)
# calculate principal components
pr.out=prcomp(USArrests, scale=TRUE)
names(pr.out)
pr.out$center
pr.out$scale
pr.out$rotation
pr.out$x
dim(pr.out$x)
# plot principal components
biplot(pr.out, scale=0)
# plot principal components
biplot(pr.out, scale=2)
# plot principal components
biplot(pr.out, scale=1)
# plot principal components
biplot(pr.out, scale=5)
# rotate principal component loadings by multiplying by -1
pr.out$rotation=-pr.out$rotation
pr.out$x=-pr.out$x
biplot(pr.out, scale=0)
# see how much each PC explains of total variance
pr.out$sdev
pr.var=pr.out$sdev^2
pr.var
pve=pr.var/sum(pr.var)
pve
# plot proportion of variance
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained", ylim=c(0,1),type='b')
plot(cumsum(pve), xlab="Principal Component", ylab="Cumulative Proportion of Variance Explained", ylim=c(0,1),type='b')
# see how much each PC explains of total variance
pr.out$sdev
pr.var=pr.out$sdev^2
pr.var
pve=pr.var/sum(pr.var)
pve
# see how much each PC explains of total variance
pr.out$sdev
pr.var
pve=pr.var/sum(pr.var)
pve
# plot proportion of variance
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained", ylim=c(0,1),type='b')
plot(cumsum(pve), xlab="Principal Component", ylab="Cumulative Proportion of Variance Explained", ylim=c(0,1),type='b')
# create dataset
set.seed(2) # so we get same data values
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
x
plot(x)
nrow(x)
ncol(x)
# run k-means
km.out=kmeans(x,2,nstart=20)
km.out$cluster
# other pieces of output
km.out$centers
km.out$withinss
km.out$tot.withinss
km.out$size
km.out$iter
# run k-means
km.out=kmeans(x,2,nstart=20)
km.out$cluster
# other pieces of output
km.out$centers
km.out$withinss
km.out$tot.withinss
km.out$size
km.out$iter
# plot the clusters
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
# k-means using 3 clusters
set.seed(4)
km.out=kmeans(x,3,nstart=20)
km.out
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=3", xlab="", ylab="", pch=20, cex=2)
# try running with just one random start
set.seed(3)
km.out=kmeans(x,3,nstart=1)
km.out$tot.withinss
km.out=kmeans(x,3,nstart=20)
km.out$tot.withinss
# create three trees with different metrics
hc.complete=hclust(dist(x), method="complete")
hc.average=hclust(dist(x), method="average")
hc.single=hclust(dist(x), method="single")
# plot trees
par(mfrow=c(1,3))
plot(hc.complete,main="Complete Linkage", xlab="", sub="", cex=.9)
plot(hc.average, main="Average Linkage", xlab="", sub="", cex=.9)
plot(hc.single, main="Single Linkage", xlab="", sub="", cex=.9)
# create three trees with different metrics
hc.complete=hclust(dist(x), method="complete")
hc.average=hclust(dist(x), method="average")
hc.single=hclust(dist(x), method="single")
# plot trees
par(mfrow=c(1,3))
plot(hc.complete,main="Complete Linkage", xlab="", sub="", cex=.9)
plot(hc.average, main="Average Linkage", xlab="", sub="", cex=.9)
plot(hc.single, main="Single Linkage", xlab="", sub="", cex=.9)
# separate into two clusters
cutree(hc.complete, 2)
cutree(hc.average, 2)
cutree(hc.single, 2)
# make 4 groups for the single linkage
cutree(hc.single, 4)
# scale data
xsc=scale(x)
par(mfrow=c(1,2))
plot(hclust(dist(xsc), method="complete"), main="Hierarchical Clustering with Scaled Features")
# create data in three dimensions
x=matrix(rnorm(30*3), ncol=3)
dd=as.dist(1-cor(t(x)))
plot(hclust(dd, method="complete"), main="Complete Linkage with Correlation-Based Distance", xlab="", sub="")
library(ISLR)
# The NCI60 data
install.packages("ISLR")
install.packages("ISLR")
# The NCI60 data
install.packages("ISLR")
library(ISLR)
nci.labs=NCI60$labs
nci.data=NCI60$data
dim(nci.data)
nci.labs[1:4]
table(nci.labs)
# PCA on the NCI60 Data
pr.out=prcomp(nci.data, scale=TRUE)
pr.out
# function to assign a color to each of the observations
Cols=function(vec){
cols=rainbow(length(unique(vec)))
return(cols[as.numeric(as.factor(vec))])
}
Cols(nci.labs)
# plot
par(mfrow=c(1,2))
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19,xlab="Z1",ylab="Z2")
plot(pr.out$x[,c(1,3)], col=Cols(nci.labs), pch=19,xlab="Z1",ylab="Z3")
# proportion of variance
summary(pr.out)
# plot the variances
plot(pr.out)
# plot the variances
plot(pr.out)
# plot the proportion of variance explained
pve=100*pr.out$sdev^2/sum(pr.out$sdev^2)
par(mfrow=c(1,2))
plot(pve,  type="o", ylab="PVE", xlab="Principal Component", col="blue")
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component", col="brown3")
# create hierarchical trees, Euclidean distance with complete, average, and single
sd.data=scale(nci.data)
par(mfrow=c(1,1))
data.dist=dist(sd.data)
plot(hclust(data.dist), labels=nci.labs, main="Complete Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="average"), labels=nci.labs, main="Average Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="single"), labels=nci.labs,  main="Single Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist), labels=nci.labs, main="Complete Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="average"), labels=nci.labs, main="Average Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="single"), labels=nci.labs,  main="Single Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="average"), labels=nci.labs, main="Average Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist), labels=nci.labs, main="Complete Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="single"), labels=nci.labs,  main="Single Linkage", xlab="", sub="",ylab="")
# complete linkage tree cuts
hc.out=hclust(dist(sd.data))
hc.clusters=cutree(hc.out,4)
table(hc.clusters,nci.labs)
# plot tree with cut line
par(mfrow=c(1,1))
plot(hc.out, labels=nci.labs)
abline(h=139, col="red")
hc.out
# cluster based on principal components
hc.out=hclust(dist(pr.out$x[,1:5]))
plot(hc.out, labels=nci.labs, main="Hier. Clust. on First Five Score Vectors")
table(cutree(hc.out,4), nci.labs)
table(cutree(hc.out,4), nci.labs)
table(hc.clusters,nci.labs)
# k-means clustering
set.seed(2)
km.out=kmeans(sd.data, 4, nstart=20)
km.clusters=km.out$cluster
table(km.clusters,hc.clusters)
#----------------------------------------------------------------------------------#
iris
#----------------------------------------------------------------------------------#
colnames(iris)
pairs(iris[,1:4], pch = 19)
as.numeric(iris$Species)
library(shiny); runApp('fancyShiny.R')
LA3p10Dry
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
range <- flowRWet1[which(flowRWet1$Species_Label == "Willow Adult" & flowRWet1$Node == "F57C"),]
range <- na.omit(flowRWet1[which(flowRWet1$Node == "LA1"),])
range
range
range
range <- na.omit(flowRWet1[which(flowRWet1$Node == "LA8"),])
range
View(flowRDry1)
View(flowRWet1)
flowRDry1 <-  flowRDry2[flowRDry2$metric == "DS_Mag_50" ,] #dry
flowRDry2 <- flowRDry0[!grepl("Wet_BFL_Mag_10", flowRDry0$metric),] #dry
flowRDry1 <-  flowRDry2[flowRDry2$metric == "DS_Mag_50" ,] #dry
flowRWet0 <- FlowRanges[!grepl("DS_Mag_50", FlowRanges$metric),] #wet
flowRWet2 <- flowRWet0[!grepl("DS_Mag_10", flowRWet0$metric),] #wet
flowRWet1 <- flowRWet2[flowRWet2$metric == "Wet_BFL_Mag_50",]
runApp('fancyShiny.R')
runApp('fancyShiny.R')
range <- flowRWet1[which(flowRWet1$Species_Label == "Willow Adult" & flowRWet1$Node == "F57C"),]
range
range <- flowRWet1[which(flowRWet1$Species_Label == "Willow Adult"),]
range
runApp('fancyShiny.R')
View(flowRWet2)
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
consignees <- read.csv("consignees.csv")
consignees <- read.csv("consignees.csv")
consignees <- read.csv("data/consignees.csv")
consignees <- read.csv("data/consignees.csv")
library(shiny); runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
library(scales)
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('C:/Users/Peter/Desktop/flexPort/analysis.R')
ui <- dashboardPage(
dashboardHeader(title = "Flexport Analytics"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Odds of Profit / Loss in Departure City",
plotlyOutput(outputId = "depart")),
box(title = "What type of Transportation",
plotOutput(outputId = "type")),
box(title = "Profit and Transportation",
selectInput("cost", "Does Flexport Gain or Lose Money?",
c("Lose" = "lose","Gain" = "gain"), width = "50%"),
selectInput("type", "Which Shipping Method?",
c("Air" = "air","Boat" = "boat"), width = "50%")),
box(title = "Flow Routes",
leafletOutput("routes"))
)
)
)
server <- function(input, output, session) {
output$depart<-renderPlotly({
if(input$cost == "gain" & input$type == "boat"){
Percent<-c(badNO/(badNO+goodNO),badAO/(badAO+goodAO),badLAO/(badLAO+goodLAO),badHKO/(badHKO+goodHKO),badYO/(badYO+goodYO),
badPO/(badPO+goodPO), badKO/(badKO+goodKO))
Percent <- (100-(Percent*100))
col = "dark green"
betterL <- data.frame(Percent)
}
if(input$cost == "gain" & input$type == "air"){
Percent<-c(badNA/(badNA+goodNA),badAA/(badAA+goodAA),badLAA/(badLAA+goodLAA),badHKA/(badHKA+goodHKA),badYA/(badYA+goodYA),
badPA/(badPA+goodPA), badKA/(badKA+goodKA))
Percent <- (100-(Percent*100))
col = "dark green"
betterL <- data.frame(Percent)
}
if(input$cost == "lose" & input$type == "air"){
Percent<-c(badNA/(badNA+goodNA),badAA/(badAA+goodAA),badLAA/(badLAA+goodLAA),badHKA/(badHKA+goodHKA),badYA/(badYA+goodYA),
badPA/(badPA+goodPA), badKA/(badKA+goodKA))
col = "tomato3"
Percent <- Percent*100
betterL <- data.frame(Percent)
}
if(input$cost == "lose" & input$type == "boat"){
Percent<-c(badNO/(badNO+goodNO),badAO/(badAO+goodAO),badLAO/(badLAO+goodLAO),badHKO/(badHKO+goodHKO),badYO/(badYO+goodYO),
badPO/(badPO+goodPO), badKO/(badKO+goodKO))
col = "tomato3"
Percent <- Percent*100
betterL <- data.frame(Percent)
}
else{}
print(betterL)
ggplot(data = betterL, aes(x = Location, y = Percent))+
geom_bar(stat = "identity", width = .5, fill = col)+
theme(text = element_text(size = 15))
})
output$routes <-  renderLeaflet({
routes <- leaflet(options = leafletOptions(
minZoom = 2,     maxZoom = 16)) %>%
setView(lng = -5, lat =34, zoom = 2)%>%
addTiles(options = providerTileOptions(opacity = .9))  %>%
addCircleMarkers(lat = 33.7292, lng = -118.2620) %>%
addCircleMarkers(lat = 29.9512, lng = 121.7232) %>%
addCircleMarkers(lat = 52.4163, lng = 4.7555) %>%
addCircleMarkers(lat = 22.556894, lng = 114.236897) %>%
addCircleMarkers(lat = 22.3333, lng = 114.1167) %>%
addCircleMarkers(lat = 31.2198 , lng = 121.4870)
})
}
shinyApp(ui, server)
badNA <- nrow(badShip[badShip$departure_port == "Ningbo" & badShip$mode == "Air",]) #0
consignees <- read.csv("data/consignees.csv")
runApp('C:/Users/Peter/Desktop/Demo.R')
runApp('fancyShiny.R')
library(shiny); runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
library(shiny); runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
finally <- data.frame(first_c, Willow_Adult, Typha_Adult, SAS_Adult,
Kayak,Fishing, Cladophora,Steelhead_Migration_Prolonged, Steelhead_Migration_Burst)
runApp('fancyShiny.R')
finally$Willow_Adult <- factor(finally$Willow_Adult, levels = finally$Willow_Adult)
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
rownames(finally)
runApp('fancyShiny.R')
library(plotly)
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('C:/Users/Peter/Desktop/flexPort/analysis.R')
runApp('fancyShiny.R')
plot(goodShipAir$actual_total_cost, goodShipAir$actual_total_invoice)
runApp('C:/Users/Peter/Desktop/flexPort/analysis.R')
runApp('C:/Users/Peter/Desktop/flexPort/analysis.R')
plot(goodShipAir$actual_total_cost, goodShipAir$actual_total_invoice)
runApp('C:/Users/Peter/Desktop/flexPort/analysis.R')
runApp('C:/Users/Peter/Desktop/flexPort/analysis.R')
runApp('C:/Users/Peter/Desktop/flexPort/analysis.R')
library(tree)
library(ISLR)
attach(Carseats)
summary(Carseats)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
Carseats
tree.carseats=tree(as.factor(High)~.-Sales,Carseats) # line updated
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
newShip <- shipments
shipments <- read.csv("data/shipments.csv")
consignees <- read.csv("data/consignees.csv")
library(shiny); runApp('fancyShiny.R')
library(reshape2)
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
runApp('fancyShiny.R')
data(Groceries)
install.packages('arules')
install.packages('arulesViz')
library(arules)
library(arulesViz)
data(Groceries)
# look at dataset
Groceries
install.packages('arules')
install.packages('arulesViz')
library(arules)
library(arulesViz)
data(Groceries)
library("arules")
install.packages('arules')
install.packages('arulesViz')
library(arules)
library(arulesViz)
<<  install.packages("arules")  >>
library(arules)
